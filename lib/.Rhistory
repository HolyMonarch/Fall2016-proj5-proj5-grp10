scale_colour_gradientn(colours=rainbow(3)) +
theme_bw()
a
library(plotly)
ggplot_ly(a)
qplot_ly(a)
plot_ly (x=c(1,2,3),y=c(5,6,7),type = ‘bar’ , mode = ‘markers’ )
plot_ly (x = c(1,2,3),
y = c(5,6,7),
type = 'bar' , mode = 'markers')
plot_ly (x = 1:length(val),
y = log(val),
type = 'bar' )
plot_ly (plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar' )
plot_ly (plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed)
plot_ly (plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text')
plot_ly (plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
colors = 'Oranges')
plot_ly(plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text') %>%
layout(title = "January 2013 Sales Report",
xaxis = list(title = ""),
yaxis = list(title = ""))
load('../output/reg_ready_data.RData')
plot_ly(plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text') %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected | More than expected ->"))
plot_ly(plot_freqs,
x = 1:length(val),
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text') %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text') %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
sum(plot_freqs$val>1)
sum(plot_freqs$val<1)
pal_red = colorRampPalette(c("red", "black"))
colors_red = pal(sum(plot_freqs$val>1))
pal_green = colorRampPalette(c("black", "green"))
colors_green = pal(sum(plot_freqs$val<=1))
pal_red = colorRampPalette(c("red", "black"))
colors_red = pal_red(sum(plot_freqs$val>1))
colors_red
colors_red = colorRampPalette(c("red", "black"))(sum(plot_freqs$val>1))
colors_red
colors_red = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
colors_green = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
colors_green
col_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
col_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
color_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
color_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
marker = list(color = c(color_overrep, color_underrep))) %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
D = read.csv('../data/shelter_data.csv')
D = D[D$AnimalType=='Dog',]
D$Breed = tolower(D$Breed)
breeds = read.csv('../data/breed_count.csv')
breed_count = as.integer(gsub(',', '', breeds$count))
breeds_names = gsub('\\(', '', breeds$breed)
breeds_names = gsub('\\)', '', breeds_names)
breeds_names = gsub(' Imp', '', breeds_names)
breeds_names = tolower(breeds_names)
names(breed_count) = breeds_names
breed_count = breed_count[breed_count>0]
D$Breed = simplify_breeds(D$Breed)
names(breed_count) = simplify_breeds(names(breed_count))
source('../lib/simplify_breeds.R')
D$Breed = simplify_breeds(D$Breed)
names(breed_count) = simplify_breeds(names(breed_count))
breed_count = tapply(breed_count, names(breed_count), sum)
sh_breeds = table(D$Breed[!grepl('mix|/', D$Breed)])
sh_breeds = sh_breeds[sh_breeds>9]
sh_breeds = sh_breeds[!names(sh_breeds)=='rat terrier']
sh_breeds = sh_breeds[!names(sh_breeds)=='anatol shepherd']
names(breed_count)[names(breed_count)=='retriever labrador'] = 'labrador retriever'
names(breed_count)[names(breed_count)=='retriever golden'] = 'golden retriever'
names(breed_count)[names(breed_count)=='german shepherd dog alsatian'] = 'german shepherd'
names(breed_count)[names(breed_count)=='poodle miniature'] = 'miniature poodle'
names(breed_count)[names(breed_count)=='dobermann'] = 'doberman pinsch'
names(breed_count)[names(breed_count)=='spaniel cocker'] = 'cocker spaniel'
names(breed_count)[names(breed_count)=='pyrenean mountain dog'] = 'great pyrenees'
names(breed_count)[names(breed_count)=='parson russell terrier'] = 'jack russell terrier'
# compute relative frequencies of main breeds in shelter vs country
sh_breeds_freq = sh_breeds/sum(sh_breeds)
breeds_freq = breed_count[names(sh_breeds)]/sum(breed_count[names(sh_breeds)])
rel_freqs = sort(sh_breeds_freq/breeds_freq, decreasing=T)
# plot
plot_freqs = as.data.frame(rel_freqs)
colnames(plot_freqs) = c('breed', 'val')
color_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
color_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
marker = list(color = c(color_overrep, color_underrep))) %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
source('~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib/overrepresented_breeds.R', echo=TRUE)
load('../output/reg_ready_data.RData')
# fit logistic regression:
m = glm(OutcomeType ~ ., data = reg_data, family="binomial")
coef_stats = coef(summary(m))
coef_stats[coef_stats[,4]<.05,]
plot_z_val = as.data.frame(coef_stats[coef_stats[,4]<.05,])
rownames(plot_z_val)
with(plot_z_val, rownames())
with(plot_z_val, rownames
)
plot_z_val = as.data.frame(coef_stats[coef_stats[,4]<.05,4])
coef_stats = coef(summary(m))
coef_stats = coef_stats[coef_stats[,4]<.05,]
rownames(coef_stats)
coef_stats[,4]
coef_stats[,3]
plot_z_val = data.frame(pred=rownames(coef_stats), val=coef_stats[,3])
plot_z_val
plot_ly(plot_z_val,
x = pred,
y = val,
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
plot_ly(plot_z_val,
x = pred,
y = val,
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
plot_z_val = arrange(plot_z_val, desc(abs(val)))
plot_z_val = data.frame(pred=rownames(coef_stats), val=coef_stats[,3])
plot_z_val = arrange(plot_z_val, desc(abs(val)))
plot_z_val
plot_ly(plot_z_val,
x = pred,
y = val,
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
lrt = anova(object=m, test="Chisq")
lrt
rownames(lrt)
rownames(lrt)[-1]
lrt[,3]
lrt[,2]/lrt[,2]
lrt[-1,2]/lrt[-1,1]
plot_z_val = arrange(plot_z_val, desc(val))
plot_z_val = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_z_val = arrange(plot_z_val, desc(val))
plot_z_val
lrt['Age',]
with(plot_z_val, val[pred=='Age'] = -val[pred=='Age'])
lrt['Age','Deviance']
lrt[c('Age','IsMale'),'Deviance']
lrt[c('Age','IsMale'),'Deviance'] = -lrt[c('Age','IsMale'),'Deviance']
lrt[c('Age','IsMale'),'Deviance']
plot_z_val = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_z_val = arrange(plot_z_val, desc(abs(val)))
lrt[c('Age','IsMale'), 'Deviance'] = -lrt[c('Age','IsMale'), 'Deviance'] # flip values for these predictors based on logistic regression results
plot_lrt = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_lrt = arrange(plot_z_val, desc(abs(val)))
plot_ly(plot_lrt,
x = pred,
y = val,
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
lrt[c('Age','IsMale'), 'Deviance'] = -lrt[c('Age','IsMale'), 'Deviance'] # flip values for these predictors based on logistic regression results
plot_lrt = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_lrt = arrange(plot_z_val, desc(abs(val)))
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
lrt[c('Age','IsMale'), 'Deviance'] = -lrt[c('Age','IsMale'), 'Deviance'] # flip values for these predictors based on logistic regression results
plot_lrt = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_lrt = arrange(plot_z_val, desc(abs(val)))
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
lrt[c('Age','IsMale'), 'Deviance']
plot_lrt = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_lrt
plot_lrt = arrange(plot_z_val, desc(abs(val)))
plot_lrt
plot_lrt = data.frame(pred=rownames(lrt)[-1], val=lrt[-1,2]/lrt[-1,1])
plot_lrt = arrange(plot_lrt, desc(abs(val)))
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text') %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Influence (z-value)"))
plot_lrt
rep(rgb(255,0,0), nrow(plot_lrt))
rep(rgb(1,0,0), nrow(plot_lrt))
plot_lrt$pred %in% c('Age','IsMale')
plot_lrt$pred == c('Age','IsMale')
colors = rep(rgb(0,.8,0), nrow(plot_lrt))
colors[plot_lrt$pred %in% c('Age','IsMale')] = rgb(.8,0,0) # change colors for predictors with neg influence based on logistic reg results
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text',
marker = list(color = colors)) %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Importance (deviance/df)"))
colors = rep(rgb(0,.6,0), nrow(plot_lrt))
colors[plot_lrt$pred %in% c('Age','IsMale')] = rgb(.6,0,0) # change colors for predictors with neg influence based on logistic reg results
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text',
marker = list(color = colors)) %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Importance (deviance/df)"))
colors = rep(rgb(0,.4,0), nrow(plot_lrt))
colors[plot_lrt$pred %in% c('Age','IsMale')] = rgb(.6,0,0) # change colors for predictors with neg influence based on logistic reg results
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text',
marker = list(color = colors)) %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Importance (deviance/df)"))
save(lrt, file='../output/lrt_log_reg.RData')
plot_ly(plot_lrt,
x = pred,
y = log(val),
type = 'bar',
text = pred,
hoverinfo = 'text',
marker = list(color = colors)) %>%
layout(title = "Significant predictors in Adoption outcome",
xaxis = list(title = ""),
yaxis = list(title = "Importance (log(deviance/df))"))
plot_lrt
packageVersion('plotly')
install.packages('plotly')
install.packages("plotly")
packageVersion('plotly')
setwd("~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib")
packageVersion('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
packageVersion('ggplot2')
setwd("~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib")
library(ggplot2)
library(plotly)
source('../lib/simplify_breeds.R')
# get shelter data and keep dogs only
D = read.csv('../data/shelter_data.csv')
D = D[D$AnimalType=='Dog',]
D$Breed = tolower(D$Breed)
# get baseline frequencies of breeds in U.S.
breeds = read.csv('../data/breed_count.csv')
breed_count = as.integer(gsub(',', '', breeds$count))
breeds_names = gsub('\\(', '', breeds$breed)
breeds_names = gsub('\\)', '', breeds_names)
breeds_names = gsub(' Imp', '', breeds_names)
breeds_names = tolower(breeds_names)
names(breed_count) = breeds_names
breed_count = breed_count[breed_count>0]
# simplify breeds
D$Breed = simplify_breeds(D$Breed)
names(breed_count) = simplify_breeds(names(breed_count))
# recount breeds after simplification
breed_count = tapply(breed_count, names(breed_count), sum)
# focus on pure breeds most common in shelter (n>9)
sh_breeds = table(D$Breed[!grepl('mix|/', D$Breed)])
sh_breeds = sh_breeds[sh_breeds>9]
# resolve conflicts between breed lists:
sh_breeds = sh_breeds[!names(sh_breeds)=='rat terrier']
sh_breeds = sh_breeds[!names(sh_breeds)=='anatol shepherd']
names(breed_count)[names(breed_count)=='retriever labrador'] = 'labrador retriever'
names(breed_count)[names(breed_count)=='retriever golden'] = 'golden retriever'
names(breed_count)[names(breed_count)=='german shepherd dog alsatian'] = 'german shepherd'
names(breed_count)[names(breed_count)=='poodle miniature'] = 'miniature poodle'
names(breed_count)[names(breed_count)=='dobermann'] = 'doberman pinsch'
names(breed_count)[names(breed_count)=='spaniel cocker'] = 'cocker spaniel'
names(breed_count)[names(breed_count)=='pyrenean mountain dog'] = 'great pyrenees'
names(breed_count)[names(breed_count)=='parson russell terrier'] = 'jack russell terrier'
# compute relative frequencies of main breeds in shelter vs country
sh_breeds_freq = sh_breeds/sum(sh_breeds)
breeds_freq = breed_count[names(sh_breeds)]/sum(breed_count[names(sh_breeds)])
rel_freqs = sort(sh_breeds_freq/breeds_freq, decreasing=T)
# plot:
plot_freqs = as.data.frame(rel_freqs)
colnames(plot_freqs) = c('breed', 'val')
color_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
color_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
marker = list(color = c(color_overrep, color_underrep))) %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"),
layout(autosize = F, height = 300))
library(ggplot2)
library(plotly)
library(dplyr)
source('../lib/simplify_breeds.R')
# get shelter data and keep dogs only
D = read.csv('../data/shelter_data.csv')
D = D[D$AnimalType=='Dog',]
D$Breed = tolower(D$Breed)
# get baseline frequencies of breeds in U.S.
breeds = read.csv('../data/breed_count.csv')
breed_count = as.integer(gsub(',', '', breeds$count))
breeds_names = gsub('\\(', '', breeds$breed)
breeds_names = gsub('\\)', '', breeds_names)
breeds_names = gsub(' Imp', '', breeds_names)
breeds_names = tolower(breeds_names)
names(breed_count) = breeds_names
breed_count = breed_count[breed_count>0]
# simplify breeds
D$Breed = simplify_breeds(D$Breed)
names(breed_count) = simplify_breeds(names(breed_count))
# recount breeds after simplification
breed_count = tapply(breed_count, names(breed_count), sum)
# focus on pure breeds most common in shelter (n>9)
sh_breeds = table(D$Breed[!grepl('mix|/', D$Breed)])
sh_breeds = sh_breeds[sh_breeds>9]
# resolve conflicts between breed lists:
sh_breeds = sh_breeds[!names(sh_breeds)=='rat terrier']
sh_breeds = sh_breeds[!names(sh_breeds)=='anatol shepherd']
names(breed_count)[names(breed_count)=='retriever labrador'] = 'labrador retriever'
names(breed_count)[names(breed_count)=='retriever golden'] = 'golden retriever'
names(breed_count)[names(breed_count)=='german shepherd dog alsatian'] = 'german shepherd'
names(breed_count)[names(breed_count)=='poodle miniature'] = 'miniature poodle'
names(breed_count)[names(breed_count)=='dobermann'] = 'doberman pinsch'
names(breed_count)[names(breed_count)=='spaniel cocker'] = 'cocker spaniel'
names(breed_count)[names(breed_count)=='pyrenean mountain dog'] = 'great pyrenees'
names(breed_count)[names(breed_count)=='parson russell terrier'] = 'jack russell terrier'
# compute relative frequencies of main breeds in shelter vs country
sh_breeds_freq = sh_breeds/sum(sh_breeds)
breeds_freq = breed_count[names(sh_breeds)]/sum(breed_count[names(sh_breeds)])
rel_freqs = sort(sh_breeds_freq/breeds_freq, decreasing=T)
# plot:
plot_freqs = as.data.frame(rel_freqs)
colnames(plot_freqs) = c('breed', 'val')
color_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
color_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
marker = list(color = c(color_overrep, color_underrep))) %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"),
layout(autosize = F, height = 300))
source('~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib/overrepresented_breeds.R', echo=TRUE)
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source('~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib/overrepresented_breeds.R', echo=TRUE)
D = read.csv('../data/shelter_data.csv')
D = D[D$AnimalType=='Dog',]
D$Breed = tolower(D$Breed)
# get baseline frequencies of breeds in U.S.
breeds = read.csv('../data/breed_count.csv')
breed_count = as.integer(gsub(',', '', breeds$count))
breeds_names = gsub('\\(', '', breeds$breed)
breeds_names = gsub('\\)', '', breeds_names)
breeds_names = gsub(' Imp', '', breeds_names)
breeds_names = tolower(breeds_names)
names(breed_count) = breeds_names
breed_count = breed_count[breed_count>0]
# simplify breeds
D$Breed = simplify_breeds(D$Breed)
names(breed_count) = simplify_breeds(names(breed_count))
# recount breeds after simplification
breed_count = tapply(breed_count, names(breed_count), sum)
# focus on pure breeds most common in shelter (n>9)
sh_breeds = table(D$Breed[!grepl('mix|/', D$Breed)])
sh_breeds = sh_breeds[sh_breeds>9]
# resolve conflicts between breed lists:
sh_breeds = sh_breeds[!names(sh_breeds)=='rat terrier']
sh_breeds = sh_breeds[!names(sh_breeds)=='anatol shepherd']
names(breed_count)[names(breed_count)=='retriever labrador'] = 'labrador retriever'
names(breed_count)[names(breed_count)=='retriever golden'] = 'golden retriever'
names(breed_count)[names(breed_count)=='german shepherd dog alsatian'] = 'german shepherd'
names(breed_count)[names(breed_count)=='poodle miniature'] = 'miniature poodle'
names(breed_count)[names(breed_count)=='dobermann'] = 'doberman pinsch'
names(breed_count)[names(breed_count)=='spaniel cocker'] = 'cocker spaniel'
names(breed_count)[names(breed_count)=='pyrenean mountain dog'] = 'great pyrenees'
names(breed_count)[names(breed_count)=='parson russell terrier'] = 'jack russell terrier'
# compute relative frequencies of main breeds in shelter vs country
sh_breeds_freq = sh_breeds/sum(sh_breeds)
breeds_freq = breed_count[names(sh_breeds)]/sum(breed_count[names(sh_breeds)])
rel_freqs = sort(sh_breeds_freq/breeds_freq, decreasing=T)
# plot:
plot_freqs = as.data.frame(rel_freqs)
colnames(plot_freqs) = c('breed', 'val')
color_overrep = colorRampPalette(c("red", "black")) (sum(plot_freqs$val>1))
color_underrep = colorRampPalette(c("black", "green")) (sum(plot_freqs$val<=1))
plot_ly(plot_freqs,
x = breed,
y = log(val),
type = 'bar',
text = breed,
hoverinfo = 'text',
marker = list(color = c(color_overrep, color_underrep))) %>%
layout(title = "Over-represented Dog Breeds in Shelter",
xaxis = list(title = ""),
yaxis = list(title = "<- Less than expected   |   More than expected ->"))
install.packages('ggplot2')
source('~/Documents/ADS/Fall2016-proj5-proj5-grp10/lib/overrepresented_breeds.R', echo=TRUE)
getwd()
